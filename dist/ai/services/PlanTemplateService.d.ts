import { PlanTemplate, UserPlanContext, PlanDiffResult, PlanGenerationCostMeta, PlanGenerationConfig } from "../interfaces/PlanTemplates";
import { UserMemoryProfile } from "../smart-memory";
import { CacheConfig } from "./CacheService";
import type { CacheService } from "./CacheService";
export declare class PlanTemplateService {
    private redis;
    private defaultTTL;
    private openai;
    private cacheService;
    constructor(config: CacheConfig, cacheService: CacheService);
    private getTemplateCacheKey;
    private getUserPlanKey;
    cacheTemplate(template: PlanTemplate): Promise<void>;
    getTemplate(type: string, goal: string, frequency: number, split: string): Promise<PlanTemplate | null>;
    personalizeTemplate(template: PlanTemplate, userProfile: UserMemoryProfile, context: UserPlanContext): Promise<PlanTemplate>;
    diffWithPreviousPlan(userId: string, newPlan: PlanTemplate): Promise<PlanDiffResult>;
    calculateGenerationCost(template: PlanTemplate, context: UserPlanContext): PlanGenerationCostMeta;
    private adjustForLowHRV;
    private adjustForPoorSleep;
    private simplifyAdaptiveTriggers;
    private adjustForEquipment;
    private adjustWorkoutDuration;
    private compressWorkout;
    private findAlternativeExercise;
    private calculatePlanDiff;
    private calculateSimilarityScore;
    private calculatePhasesSimilarity;
    private findReusableComponents;
    private arePhasesSimilar;
    private generateRecommendedChanges;
    private calculateComputeUnits;
    private calculateAITokens;
    private calculateStorageCost;
    private estimateWeeklyAdaptations;
    generatePlan(profile: UserMemoryProfile, config: PlanGenerationConfig): Promise<PlanTemplate>;
    private generatePlanWithAI;
    private validateAndEnhancePlan;
    private generateCacheKey;
    adaptPlan(currentPlan: PlanTemplate, profile: UserMemoryProfile, metrics: any): Promise<PlanTemplate>;
}
